<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model IEnumerable<#= "<" + ViewDataTypeName + ">" #>
@using GridMvc.Html
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewDataTypeShortName#>s";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<div class="content-wrapper">

<h4>@ViewBag.Title</h4>

<span class="text-danger">@ViewBag.ErrorMsg</span>

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}

string pkName = GetPrimaryKeyName();
#>
<p>
    @Html.ActionLink("Create", "Create")
</p>

<div class="grid-container">
    @Html.Grid(Model).Columns(columns => {

			columns.Add().Encoded(false).Sanitized(false).SetWidth(20).RenderValueAs(o => Html.ActionLink("Edit", "Edit", new {id=o.<#= pkName #> }));
				
<#
IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
foreach (PropertyMetadata property in properties) {

    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
    
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }

if (property.PropertyName=="RowVersion") {
continue;
}

if (property.PropertyName=="CreatedOn") {
continue;
}

if (property.PropertyName=="ModifiedOn") {
continue;
}

if (property.PropertyName=="CreatedBy") {
continue;
}

if (property.PropertyName=="ModifiedBy") {
continue;
}


#>
							columns.Add(c => c.<#= property.PropertyName #>).Titled("<#= property.PropertyName #>").Sortable(true).Filterable(true);
<#
    }
}
#>
					
							columns.Add().Encoded(false).Sanitized(false).SetWidth(20).RenderValueAs(o => Html.ActionLink("Delete", "Delete", new {id=o.<#= pkName #> }, new { onclick = "return confirm('Delete this?');" }));
                        }).WithPaging(1000).Sortable(true).Filterable(true).WithMultipleFilters()
</div>

</div>

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>